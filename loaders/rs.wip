/* eslint-ignore */
import { BunPlugin } from 'bun';
import { dlopen } from 'bun:ffi';
import { Loader } from 'hyperimport';
import { mkdir } from 'node:fs/promises';

export default class RustLoader implements Loader {
  name = 'Rust Loader';
  extension = 'rs';
  cwd = process.cwd();
  _config = {
    extension: 'rs',
    buildCommand: (_importPath: string, _outDir: string) => [],
    outDir: (importPath: string) => importPath,
  };
  config = {
    importPath: '',
    libPath: '',
    buildCommand: [],
    outDir: '',
    symbols: {},
  };
  async build() {
    Bun.spawnSync(this.config.buildCommand);
  }

  /**
   * Runs at the beginning of `initConfig()`.
   * By default asks for the build command and output directory from the user on importing the source file for the first time.
   */
  async initConfigPre() {
    console.log(
      `\x1b[33m[HYPERIMPORT]\x1b[39m: ${this.name}\nNo configuration was found for "${this.config.importPath}"\nEnter the build command and output directory to configure it.\nPress enter to use the default values.\n`,
    );
    this.config.buildCommand =
      prompt('build command: (default)')?.split(' ') ??
      this.config.buildCommand;
    this.config.outDir =
      prompt(`output directory: (${this.config.outDir})`) ?? this.config.outDir;
    await mkdir(this.config.outDir, { recursive: true });
  }

  /**
   * Generates `config.ts` and `types.d.ts` to add type completions for the source file.
   */
  async initConfigTypes() {
    const filename = basename(this.config.importPath);
    await mkdir(`${this.cwd}/@types/${filename}`, { recursive: true });
    Bun.write(
      `${this.cwd}/@types/${filename}/lastModified`,
      lastModified(this.config.importPath),
    );
    const configWriter = Bun.file(
      `${this.cwd}/@types/${filename}/config.ts`,
    ).writer();
    configWriter.write(
      `import { LoaderConfig, T } from "hyperimport";\nexport default {\n\tbuildCommand: ${JSON.stringify(
        this.config.buildCommand,
      )},\n\toutDir: "${this.config.outDir}",\n\tsymbols: {`,
    );
    for (const symbol of nm(this.config.libPath)) {
      configWriter.write(
        `\n\t\t${symbol}: {\n\t\t\targs: [],\n\t\t\treturns: T.void\n\t\t},`,
      );
    }
    configWriter.write(`\n\t}\n} satisfies LoaderConfig.Main;`);
    configWriter.end();
    Bun.write(
      `${this.cwd}/@types/${filename}/types.d.ts`,
      `declare module "*/${filename}" {\n\tconst symbols: import("bun:ffi").ConvertFns<typeof import("./config.ts").default.symbols>;\n\texport = symbols;\n}`,
    );
    console.log(
      `\n\x1b[32mConfig file has been generated at "${this.cwd}/@types/${filename}/config.ts"\x1b[39m\nEdit the config.ts and set the argument and return types, then rerun the script.`,
    );
  }

  /**
   * When the source file isn't configured yet, this executes to configure it.
   */
  async initConfig() {
    await this.initConfigPre();
    console.log('\nBuilding the source file...');
    await this.build();
    console.log('The source file has been built.');
    await this.initConfigTypes();
  }

  /**
   * Checks if the source file was modified, if it is, then `build()` is executed to rebuild the changed source file.
   */
  async ifSourceModify() {
    const lm = lastModified(this.config.importPath);
    const lmfile = `${this.cwd}/@types/${basename(
      this.config.importPath,
    )}/lastModified`;
    if (lm !== readFileSync(lmfile).toString()) {
      await this.build();
      Bun.write(lmfile, lm);
    }
  }

  /**
   * Imports the symbols defined in `config.ts` to be used when opening the shared library.
   * If `config.ts` isn't found, the source file isn't configured yet, hence executes `initConfig()` and exits the process.
   * @returns An object containing the symbols.
   */
  async getSymbols(): Promise<Record<string, Narrow<FFIFunction>>> {
    try {
      await this.ifSourceModify();
      return (
        await import(
          `${this.cwd}/@types/${basename(this.config.importPath)}/config.ts`
        )
      ).default.symbols;
    } catch {
      await this.initConfig();
      process.exit();
    }
  }

  /**
   * Runs just before opening/loading the shared library.
   */
  async preload() {
    this.config.outDir = this._config.outDir!(this.config.importPath);
    this.config.buildCommand = this._config.buildCommand!(
      this.config.importPath,
      this.config.outDir,
    );
    this.config.libPath = `${this.config.outDir}/lib${
      parse(this.config.importPath).name
    }.${suffix}`;
  }

  /**
   * Creates the plugin instance to be consumed by `Bun.plugin()` to register it.
   * @returns A `BunPlugin` instance.
   */
  async toPlugin(): Promise<BunPlugin> {
    const parentThis = this;
    return {
      name: parentThis.name,
      setup(build) {
        build.onLoad(
          { filter: new RegExp(`\.(${parentThis._config.extension})$`) },
          async (args) => {
            parentThis.config.importPath = args.path;
            await parentThis.preload();
            return {
              exports: dlopen(
                parentThis.config.libPath,
                await parentThis.getSymbols(),
              ).symbols,
              loader: 'object',
            };
          },
        );
      },
    };
  }
}
/**
 * Returns the last modified time of the file.
 * @param path The path to the file.
 */
export function lastModified(path: string) {
  return `${Bun.file(path).lastModified}`;
}
/**
 * Returns the list of exported symbols in the library using the `nm` command.
 * (Removes the leading underscore if any.)
 * @param path The path to the library to be loaded.
 */
export function nm(path: string) {
  return [
    ...Bun.spawnSync(['nm', path])
      .stdout.toString()
      .matchAll(/T (.*)$/gm),
  ].map((x) => (x[1][0] === '_' ? x[1].slice(1) : x[1]));
}
